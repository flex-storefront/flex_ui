name: Build and Upload Android App for Firebase

on:
  push:
    tags:
      - 'qa*'
      - 'v[0-9]*.[0-9]*.[0-9]*'

jobs:
  validate-tag:
    runs-on: ubuntu-latest
    outputs:
      build_type: ${{ steps.check-tag.outputs.build_type }}
      is_valid: ${{ steps.check-tag.outputs.is_valid }}
    steps:
      - name: Check Tag Format
        id: check-tag
        run: |
          TAG=${{ github.ref_name }}
          if [[ $TAG =~ ^qa.* ]]; then
            echo "build_type=qa" >> $GITHUB_OUTPUT
            echo "is_valid=true" >> $GITHUB_OUTPUT
          elif [[ $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "build_type=release" >> $GITHUB_OUTPUT
            echo "is_valid=true" >> $GITHUB_OUTPUT
          else
            echo "is_valid=false" >> $GITHUB_OUTPUT
            echo "Invalid tag format. Must be 'qa*' or 'v#.#.#'" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  get-build-number:
    needs: validate-tag
    uses: ./.github/workflows/build-number.yml
    permissions:
      actions: read
      contents: read

  build-android:
    name: Build Android Firebase APK
    needs: [validate-tag, get-build-number]
    if: needs.validate-tag.outputs.is_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.0'

      - name: Install Dependencies
        run: |
          cd app
          flutter pub get

      - name: Store Base Version
        run: |
          BASE_VERSION=$(grep "^version:" app/pubspec.yaml | sed 's/version: //')
          echo "base_version=$BASE_VERSION" >> $GITHUB_ENV
          echo "----------------------------------------"
          echo "Base version from pubspec: $BASE_VERSION"
          echo "----------------------------------------"

      - name: Update Pubspec Version
        run: |
          BUILD_NUMBER=${{ needs.get-build-number.outputs.build_number }}
          
          echo "Current build number: $BUILD_NUMBER"
          
          # Always append build number for both QA and release builds
          sed -i.bak 's/^version: \([0-9]*\.[0-9]*\.[0-9]*\).*$/version: \1+'$BUILD_NUMBER'/' app/pubspec.yaml
          
          # Store the version for later use
          FULL_VERSION=$(grep "^version:" app/pubspec.yaml | sed 's/version: //')
          echo "full_version=$FULL_VERSION" >> $GITHUB_ENV
          
          echo "----------------------------------------"
          echo "Updated pubspec version: $FULL_VERSION"
          echo "----------------------------------------"

      - name: Set APK Name
        run: |
          TAG=${{ github.ref_name }}
          BUILD_TYPE=${{ needs.validate-tag.outputs.build_type }}
          
          if [ "$BUILD_TYPE" = "qa" ]; then
            APK_NAME="flex_ui_v${{ env.base_version }}+${{ needs.get-build-number.outputs.build_number }}_${TAG}.apk"
          else
            APK_NAME="flex_ui_${TAG}.apk"
          fi
          
          echo "apk_name=$APK_NAME" >> $GITHUB_ENV
          echo "----------------------------------------"
          echo "Build Type: $BUILD_TYPE"
          echo "Tag: $TAG"
          echo "APK Name: $APK_NAME"
          echo "----------------------------------------"

      - name: Create Distribution Notes
        run: |
          BUILD_NUMBER=${{ needs.get-build-number.outputs.build_number }}
          TAG=${{ github.ref_name }}
          BUILD_TYPE=${{ needs.validate-tag.outputs.build_type }}
          
          # Create distribution-notes.md from scratch
          NOTES_FILE="app/distribution-notes.md"
          {
            echo "----------------------------------------"
            echo "Version Information"
            echo "----------------------------------------"
            echo "Base Version | ${{ env.base_version }}"
            echo "Full Version | ${{ env.full_version }}"
            if [ "$BUILD_TYPE" = "qa" ]; then
              echo "Build Code  | $BUILD_NUMBER"
            fi
            echo "Tag         | $TAG"
            echo "Type        | ${BUILD_TYPE^^} Build"
            echo "----------------------------------------"
            if [ "$BUILD_TYPE" = "qa" ]; then
              echo "Testing Instructions:"
              echo "- Check all features for bugs"
            else
              echo "Release Notes:"
              echo "- Official release version $TAG"
            fi
            echo "----------------------------------------"
          } > "$NOTES_FILE"
          echo "Distribution notes contents:"
          cat "$NOTES_FILE"

      - name: Build Android APK
        run: |
          cd app
          flutter build apk --release
          echo "Renaming APK to: ${{ env.apk_name }}"
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/${{ env.apk_name }}

      - name: Upload APK to Firebase
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          BUILD_TYPE=${{ needs.validate-tag.outputs.build_type }}
          DIST_GROUP="Build"
          if [ "$BUILD_TYPE" = "release" ]; then
            DIST_GROUP="Release"
          fi
          
          npm install -g firebase-tools
          echo "Uploading APK to Firebase App Distribution..."
          firebase appdistribution:distribute app/build/app/outputs/flutter-apk/${{ env.apk_name }} \
            --app 1:486238391141:android:8377bfb3f147ae672a6f8c \
            --groups "$DIST_GROUP" \
            --release-notes-file "app/distribution-notes.md" \
            --token ${{ secrets.FIREBASE_CLI_TOKEN }}

      - name: Upload APK to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.apk_name }}
          path: app/build/app/outputs/flutter-apk/${{ env.apk_name }}
          retention-days: 90
          if-no-files-found: error
          compression-level: 6  # Good balance for binary files

      - name: Upload Build Metadata to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-metadata
          path: |
            app/pubspec.yaml
            app/distribution-notes.md
          retention-days: 90
          if-no-files-found: error
          compression-level: 1  # Light compression for text files
          overwrite: true      # Always keep latest version